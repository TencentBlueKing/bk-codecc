package com.tencent.bk.codecc.defect.dao.defect.mongorepository.sca

import com.tencent.bk.codecc.defect.model.sca.SCAVulnerabilityEntity
import org.springframework.data.mongodb.repository.MongoRepository
import org.springframework.stereotype.Repository

@Repository
interface SCAVulnerabilityRepository : MongoRepository<SCAVulnerabilityEntity, String> {

    /**
     * 根据漏洞实体ID查询漏洞信息
     * @param entityId 漏洞实体ID
     * @return 匹配的漏洞实体或null
     */
    fun findByEntityId(entityId: String): SCAVulnerabilityEntity?

    /**
     * 根据任务ID、工具名称和组件名称集合查询漏洞列表
     * @param taskId 任务ID
     * @param toolName 工具名称
     * @param packageNames 组件名称集合
     * @return 匹配的漏洞实体列表
     */
    fun findByTaskIdAndToolNameAndPackageNameIn(
        taskId: Long,
        toolName: String,
        packageNames: Collection<String>
    ): List<SCAVulnerabilityEntity>

    /**
     * 根据任务ID、工具名称、排除的组件名称集合和状态查询漏洞
     * @param taskId 任务ID
     * @param toolName 工具名称
     * @param packageNames 需要排除的组件名称集合
     * @param status 漏洞状态
     * @return 匹配的漏洞实体列表
     */
    fun findByTaskIdAndToolNameAndPackageNameNotInAndStatus(
        taskId: Long,
        toolName: String,
        packageNames: Collection<String>,
        status: Int
    ): List<SCAVulnerabilityEntity>

    /**
     * 根据任务ID、工具名称、状态和有效包标记查询漏洞
     * @param taskId 任务ID
     * @param toolName 工具名称
     * @param status 漏洞状态
     * @param hasEnabledPackage 是否关联有效组件包
     * @return 匹配的漏洞实体列表
     */
    fun findByTaskIdAndToolNameAndStatusAndHasEnabledPackage(
        taskId: Long,
        toolName: String,
        status: Int,
        hasEnabledPackage: Boolean
    ): List<SCAVulnerabilityEntity>

    /**
     * 根据任务ID集合和实体ID集合批量查询漏洞
     * @param taskId 任务ID集合
     * @param entityId 漏洞实体ID集合
     * @return 匹配的漏洞实体列表
     */
    fun findByTaskIdInAndEntityIdIn(
        taskId: List<Long>,
        entityId: Set<String>
    ): List<SCAVulnerabilityEntity>
}
