apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-codecc-async
  labels:
    pv: nfs-codecc-async
spec:
  capacity:
    storage: {{ .Values.volume.storage }}
  accessModes:
    - ReadOnlyMany
  persistentVolumeReclaimPolicy: {{ .Values.volume.persistentVolumeReclaimPolicy }}
  storageClassName: nfs-codecc-async
  nfs:
    path: /data/nfs/bkcodecc
    server: {{ .Values.volume.nfs.server }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-codecc-async
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: {{ .Values.volume.storage }}
  storageClassName: nfs-codecc-async
  selector:
    matchLabels:
      pv: nfs-codecc-async
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: bkci-codecc-asyncreport
  name: bkci-codecc-asyncreport
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: bkci-codecc-asyncreport
  template:
    metadata:
      labels:
        app: bkci-codecc-asyncreport
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostAliases:
        - ip: "{{ .Values.host.BK_CI_PRIVATE_IP }}"
          hostnames:
            - "{{ .Values.env.BK_CI_PRIVATE_HOST }}"
      containers:
        - image: {{ .Values.image.hub }}/bkci-codecc-asyncreport:{{ .Values.image.tag }}
          name: bkci-codecc-asyncreport
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: /data/docker/bkci/codecc/backend/
          command: ['/bin/sh','-c','/data/docker/bkci/codecc/backend/module_run_codecc_asyncreport.sh']
          env:
            - name: CONSUL_SERVER
              value: {{ .Values.consul.server }}
            - name: NODE_IP
              valueFrom:
                fieldRef:
                    fieldPath: status.hostIP
          volumeMounts:
            - mountPath: "/data/bkee/codecc/nfs"
              name: nfs-codecc-async
      volumes:
        - name: nfs-codecc-async
          persistentVolumeClaim:
            claimName: x
