## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Specifies whether RBAC resources should be created
##
rbac:
  cluster:
    create: true
  create: true

## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:

# ipv6 开启为true
ipv6:
  enabled: false

# 支持esb 开启为true
bkEsbEnabled: false

# metrics采集配置
serviceMonitor:
  enabled: false


## 日志采集配置
bkLogConfig:
  enabled: false
  service:
    dataId: 1
  gatewayAccess:
    dataId: 1
  gatewayError:
    dataId: 1

## ingress配置
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "10240m"

## nginx-ingress-controller 配置
## ref: https://github.com/bitnami/charts/tree/master/bitnami/nginx-ingress-controller
nginx-ingress-controller:
  ## 是否部署nginx-ingress-controller
  enabled: false
  defaultBackend:
    enabled: false

## mongodb charts配置
## ref: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
mongodb:
  # 是否部署mongodb
  # 如果需要使用外部数据库，设置为false并配置externalMongodb
  enabled: __deploy_enable__
  useStatefulSet: true
  # ipv6 开启
  # enableIPv6: true
  # arbiter:
  #   enabled: false
  auth:
    enabled: true
    rootPassword: codecc
    password: codecc
    username: codecc
    database: db_task
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  persistence:
    subPath: mongodb
    size: 10Gi
  initdbScripts:
     # ipv6 时关闭
    create_admin_user.sh: |
      $MONGODB_BIN_DIR/mongo admin --host 127.0.0.1 --port $MONGODB_PORT_NUMBER -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD << EOF
      use db_defect
      db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_defect"}]})
      use db_quartz
      db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_quartz"}]})
      use db_schedule
      db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_schedule"}]})
      EOF
     # ipv6 开启
  #   create_admin_user.sh: |
  #     $MONGODB_BIN_DIR/mongo --ipv6 admin --port $MONGODB_PORT_NUMBER -u  $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD << EOF
  #     use db_defect
  #     db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_defect"}]})
  #     use db_quartz
  #     db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_quartz"}]})
  #     EOF
  # extraEnvVars:
  # - name: MONGODB_CLIENT_EXTRA_FLAGS
  #   value: "--ipv6"      
 
## 如果mongodb.enabled为false，bkrepo将使用下面的参数连接外部mongodb
externalMongodb:
  ## mongodb 帐号密码与
  host: localhost:27017
  username: codecc
  password: codecc
  port: 27017
  extraUrlParams: ""
  authDB: admin

redis:
  enabled: __deploy_enable__
  auth:
    enabled: true
    password: codecc
  replica:
    replicaCount: 1
    persistence: 
      size: 10Gi
  master:
    persistence: 
      size: 10Gi

externalRedis:
  ## mongodb 标准连接字符串
  host: localhost
  port: 6379
  password: codecc

rabbitmq:
  enabled: __deploy_enable__
  persistence:
    size: 10Gi
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  auth:
    enabled: true
    username: codecc
    password: codecc
    # 修改此选项必须删除rabbitmq的pvc , 否则会创建rabbitmq失败
    erlangCookie: cookie
  communityPlugins: "https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.8.17/rabbitmq_delayed_message_exchange-3.8.17.8f537ac.ez"
  extraPlugins: "rabbitmq_delayed_message_exchange"
  extraConfiguration: |-
    default_vhost = default-vhost
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
  # # ipv6环境开启
  # initContainers:
  # - name: ipv6-init
  #   image: "docker.io/busybox:1.33.1"
  #   imagePullPolicy: IfNotPresent
  #   volumeMounts:
  #   - name: ipv6-cfg
  #     mountPath: /ipv6
  #   command: ['sh', '-c', 'echo "{inet6, true}." > /ipv6/erl_inetrc']
  # extraVolumes:
  # - name: ipv6-cfg
  #   emptyDir: {}
  # extraVolumeMounts:
  # - name: ipv6-cfg
  #   mountPath: /ipv6
  # extraEnvVars:
  # - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
  #   value: "-kernel inetrc '/ipv6/erl_inetrc' -proto_dist inet6_tcp"
  # - name: RABBITMQ_CTL_ERL_ARGS
  #   value: "-proto_dist inet6_tcp"


externalRabbitmq:
  ## mongodb 标准连接字符串
  host: localhost
  virtualhost: localhost
  username: codecc
  password: codecc

    
## 数据持久化配置, 当使用filesystem方式存储时需要配置
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
persistence:
  ## 是否开启数据持久化，false则使用emptyDir类型volume, pod结束后数据将被清空，无法持久化
  enabled: false
  accessMode: ReadWriteOnce
  size: 100Gi

  ## 如果不定义或设置为null, 将使用默认的storageClass(minikube上是hostPath, AWS上的gp2, GKE上是standard)
  ## 如果设置为"-", 则禁用动态卷供应
  ## 如果设置为其它值，则storageClassName: <storageClass>
  # storageClass: "-"

  ## 绑定k8s集群中已存在的pvc
  ## Requires persistence.enabled: true
  # existingClaim: my-persistent-volume-claim

  ## 如果开启持久化，并且没有任何上述配置，将使用动态卷供应方式提供存储，使用storageClass定义的存储类。
  ## 在删除该声明后，这个卷也会被销毁(用于单节点环境，生产环境不推荐)。
  # ref: https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/

# pv等申明 
pv:
  enabled: false

init:
  mongodb:
    enabled: __deploy_enable__
    auth:
      username: codecc
      password: codecc
    image:
      registry: __image_host__
      repository: __image_path__/codecc-mongo-init
      tag: __image_backend_tag__
      pullPolicy: IfNotPresent
      pullSecrets: []
  entrance:
    enabled: __deploy_enable__
    image:
      registry: __image_host__
      repository: __image_path__/codecc-entrance-init
      tag: __image_backend_tag__
      pullPolicy: IfNotPresent
      pullSecrets: []
  storage:
    enabled: __deploy_enable__
    image:
      registry: __image_host__
      repository: __image_path__/codecc-storage-init
      tag: __image_backend_tag__
      pullPolicy: IfNotPresent
      pullSecrets: []
common:
  ## 部署区域，可不填
  region:
  ## SpringBoot active profile
  springProfile: dev
  ## pod volume 挂载路径
  mountPath: /data/storage

configmap:
  enabled: true

## 网关配置
gateway:
  enabled: __deploy_enable__
  ## dns服务器地址，用于配置nginx resolver。local=on为openrestry语法，取本机/etc/resolv.conf配置
  dnsServer: local=on
  ## 网关访问微服务认证信息
  authorization: "Platform MThiNjFjOWMtOTAxYi00ZWEzLTg5YzMtMWY3NGJlOTQ0YjY2OlVzOFpHRFhQcWs4NmN3TXVrWUFCUXFDWkxBa00zSw=="
  ## 部署模式，standalone: 独立模式，ci: 与ci搭配模式
  deployMode: standalone
  ## codecc gateway service配置
  service:
    type: ClusterIP
    ## 服务类型为`ClusterIP`时端口设置
    port: 80
    ## 服务类型为`NodePort`时端口设置
    nodePort: 30025
  ## Kubernetes 通用配置
  image:
    registry: __image_host__
    repository: __image_path__/codecc-gateway
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""

task:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-task
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080

defect:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-defect
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080


report:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-report
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080


asyncreport:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-asyncreport
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080

codeccjob:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-codeccjob
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080

quartz:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-quartz
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080


schedule:
  enabled: __deploy_enable__
  env:
    JVM_XMS: 512m
    # JVM的-xmx , 不能大于 limits.memory
    JVM_XMX: 1024m
    # 其他的配置
    JVM_OPTIONS:
  image:
    registry: __image_host__
    repository: __image_path__/codecc-schedule
    tag: __image_backend_tag__
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
  replicaCount: 1
  hostAliases: [ ]
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  podLabels: { }
  podAnnotations: { }
  priorityClassName: ""
  config:
    server:
      port: 8080